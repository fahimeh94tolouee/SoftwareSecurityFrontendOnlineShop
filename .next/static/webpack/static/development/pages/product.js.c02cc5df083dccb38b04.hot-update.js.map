{"version":3,"file":"static/webpack/static/development/pages/product.js.c02cc5df083dccb38b04.hot-update.js","sources":["webpack:///./components/product/productData/question.js","webpack:///./containers/productData.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport { Col, Row } from \"styled-bootstrap-grid\";\nimport Checkbox from \"../../lib/checkbox\";\nimport { Box } from \"../../../styled_components/product/databox/questionBox\";\nconst Question = props => {\n  console.log(props);\n\n  const [newQuestion, setNewQuestion] = useState(\"\");\n  const lengthOfQuestion = () => {\n    if (\n      typeof props.questions.data !== \"undefined\" &&\n      props.questions.data.length > 0\n    ) {\n      return <small>({props.questions.data.length} Questions)</small>;\n    }\n  };\n  const helpful = (likes, dislikes) => {\n    return (\n      <div className=\"helpful\">\n        Was this review helpful to you?\n        <ul>\n          <li>{likes <= 0 ? \"\" : likes} Yes</li>\n          <li>{dislikes <= 0 ? \"\" : dislikes} No</li>\n        </ul>\n      </div>\n    );\n  };\n  const answersView = answers => {\n    if (typeof answers === \"object\" && answers.length > 0) {\n      return (\n        <div className=\"answers\">\n          {answers.map(item => (\n            <div className=\"answer\" key={item.id}>\n              <div className=\"post\">\n                <div className=\"comment-title\">\n                  By{\" \"}\n                  {item.user}\n                </div>\n                <div className=\"author\">\n                  On{\" \"}\n                  {item.created_at}\n                </div>\n              </div>\n              <div className=\"text\">{item.answer}</div>\n              {helpful(item.likes, item.dislikes)}\n            </div>\n          ))}\n        </div>\n      );\n    }\n  };\n  const questionsView = () => {\n    if (typeof props.questions.data === \"object\") {\n      return props.questions.data.map(item => {\n        return (\n          <React.Fragment key={item.id}>\n            <div className=\"question\">\n              <div className=\"post\">\n                <div className=\"comment-title\">\n                  By{\" \"}\n                  {item.user}\n                </div>\n                <div className=\"author\">\n                  On{\" \"}\n                  {item.created_at}\n                </div>\n              </div>\n              <div className=\"text\">{item.question}</div>\n              <div className=\"answer-but\">Answer to this question</div>\n            </div>\n            {answersView(item.answers)}\n          </React.Fragment>\n        );\n      });\n    }\n  };\n  const askQuestion = ()=>{\n    props.storeQuestion(\n      \n    )\n  }\n\n  return (\n    <Box>\n      <div className=\"title\">Questions and Answers</div>\n        <div className=\"sub-title\">Ask your question about this product</div>\n      <section>\n        <textarea\n          placeholder=\"\"\n          value={newQuestion}\n          onChange={e => {\n            setNewQuestion(e.target.value)\n          }}\n        />\n        <Row>\n          <Col col=\"3\">\n            <div className=\"add-faq\" onClick={()=> askQuestion()}>\n              <span>Ask a question</span>\n            </div>\n          </Col>\n          <Col col=\"9\">\n            <span className=\"rule\">\n              By selecting the 'Ask a question' button, I agree to the content publishing rules on Maleno.\n            </span>\n          </Col>\n        </Row>\n      </section>\n      <section>\n        <Row>\n          <Col col=\"6\">\n            <div className=\"sort-title\">\n              <span>\n                Questions and Answers\n                {lengthOfQuestion()}\n              </span>\n            </div>\n          </Col>\n          <Col col=\"6\">\n            <ul className=\"sort-list\">\n              <li>Sort based on:</li>\n              <li\n                className={props.sort === \"newest\" ? \"active\" : \"\"}\n                onClick={() => {\n                  props.changeSort(\"newest\");\n                }}\n              >\n                Latest questions\n              </li>\n              <li\n                className={props.sort === \"most_answered\" ? \"active\" : \"\"}\n                onClick={() => {\n                  props.changeSort(\"most_answered\");\n                }}\n              >\n                Most answered questions\n              </li>\n              <li\n                className={props.sort === \"user_question\" ? \"active\" : \"\"}\n                onClick={() => {\n                  props.changeSort(\"user_question\");\n                }}\n              >\n                Your questions\n              </li>\n            </ul>\n          </Col>\n        </Row>\n      </section>\n      {questionsView()}\n    </Box>\n  );\n};\nexport default Question;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Box } from \"../styled_components/product/dataBox\";\nimport { getComments } from \"../actions/comment\";\nimport Tabs from \"../components/product/productData/tabs\";\nimport Comments from \"../components/product/productData/comments\";\nimport Question from \"../components/product/productData/question\";\nimport Review from \"../components/product/productData/review\";\nimport Features from \"../components/product/productData/features\";\nimport {QuestionAction} from \"../actions\";\nclass ProductData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: \"features\",\n      comments: null,\n      comment_sort: \"buyers\",\n      questions: null,\n      question_sort: \"newest\"\n    };\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let result = {};\n    if (nextProps.comments !== prevState.comments) {\n      result.comments = nextProps.comments;\n    }\n    if (nextProps.questions !== prevState.questions) {\n      result.questions = nextProps.questions;\n    }\n\n    return result;\n  }\n\n  changeSort(value, type) {\n    if (type === \"comment\") {\n      this.setState(\n        {\n          comment_sort: value\n        },\n        () => {\n          this.props.getComments(this.props.id, {\n            sort: value\n          });\n        }\n      );\n    } else if (type === \"question\") {\n      this.setState(\n        {\n          question_sort: value\n        },\n        () => {\n          this.props.getQuestion(this.props.id, {\n            sort: value\n          });\n        }\n      );\n    }\n  }\n  listView() {\n    console.log(this.state.questions, \"ddww\");\n    switch (this.state.status) {\n      // case \"features\":\n      //   return (\n      //     <Features\n      //       enName={this.props.enName}\n      //       productData={this.props.productData}\n      //     />\n      //   );\n      case \"comments\":\n        return (\n          <Comments\n            name={this.props.name}\n            comments={this.state.comments}\n            sort={this.state.comment_sort}\n            changeSort={value => {\n              this.changeSort(value, \"comment\");\n            }}\n          />\n        );\n      case \"question\":\n        return (\n          <Question\n            questions={this.state.questions}\n            sort={this.state.question_sort}\n            changeSort={value => {\n              this.changeSort(value, \"question\");\n            }}\n            storeQuestion={(data)=>this.props.storeQuestion(this.props.id, data)}\n          />\n        );\n      case \"review\":\n        return (\n          <Review\n            name={this.props.name}\n            advantages={this.props.advantages}\n            disadvantages={this.props.disadvantages}\n            rating={this.props.rating}\n            desc={this.props.desc}\n            meta_description={this.props.meta_description}\n          />\n        );\n      default:\n        return null;\n    }\n  }\n  changeStatus(value) {\n    if (this.state.status !== value) {\n      this.setState(\n        {\n          status: value\n        },\n        () => {\n          if (value === \"question\") {\n            if (!this.state.questions.isFetched) {\n              this.props.getQuestion(this.props.id, {\n                sort: this.state.question_sort\n              });\n            }\n          }\n          if (value === \"comments\") {\n            if (!this.state.comments.cache) {\n              this.props.getComments(this.props.id, {\n                sort: this.state.comment_sort\n              });\n            }\n          }\n        }\n      );\n    }\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <Box>\n          <div className=\"data\">\n            <div className=\"sep\" />\n            <div className=\"tabs\">\n              <Tabs\n                onChange={this.changeStatus.bind(this)}\n                status={this.state.status}\n              />\n            </div>\n            {this.listView()}\n          </div>\n        </Box>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = store => {\n  return {\n    comments: store.Comment,\n    questions: store.Question\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    getComments: (id, sort) => {\n      dispatch(getComments(id, sort));\n    },\n    getQuestion: (id, sort) => {\n      // dispatch(getQuestion(id, sort));\n      dispatch(QuestionAction.getListRequest(id, sort));\n    },\n    storeQuestion:(id, data)=>{\n      dispatch(QuestionAction.storeRequest(id, data))\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProductData);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAKA;AAAA;AAZA;AAkBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAKA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAQA;AAAA;AACA;AAAA;AAOA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAeA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;;;AAYA;AAAA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AADA;AAIA;AACA;AADA;AAGA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AA1CA;AA4CA;;;AACA;AAAA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;;;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAUA;;;AA9HA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AArBA;AACA;AA0IA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;;;;A","sourceRoot":""}