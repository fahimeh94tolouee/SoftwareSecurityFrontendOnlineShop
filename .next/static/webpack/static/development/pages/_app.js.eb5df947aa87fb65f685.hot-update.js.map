{"version":3,"file":"static/webpack/static/development/pages/_app.js.eb5df947aa87fb65f685.hot-update.js","sources":["webpack:///./reducers/user.js","webpack:///./sagas/user.js"],"sourcesContent":["import getUserIdentification from \"../utilities/specifics/getUserIdentification\";\nimport * as types from \"../actions/actionTypes\";\n\nconst initialState = {\n    token:false,\n    data:null,\n    loading: false,\n    changePasswordProcessing:false,\n    error: \"\"\n};\nconst User = (state = initialState, action) => {\n    let previousData = {},\n      fullName = \"\";\n    switch (action.type) {\n        case 'SET_USER_DATA':\n            return { ...state, ...action.payload };\n\n        case types.GET_USER_DATA:\n            return {...state, loading: true, data: null, error: \"\" }\n        case types.GET_USER_DATA_SUCCESS:\n            previousData = state.data ? { ...state.data } : {};\n            fullName = getUserIdentification(action.data);\n            return {\n                ...state,\n                loading: false,\n                data: { ...previousData, ...action.data, fullName: fullName }\n            }\n        case types.GET_USER_DATA_FAILURE:\n            return { ...state, loading: false, error: action.error };\n\n        case types.CHANGE_USER_PASSWORD:\n            return { ...state, changePasswordProcessing: true };\n        case types.CHANGE_USER_PASSWORD_SUCCESS:\n            return { ...state, changePasswordProcessing: false };\n        case types.CHANGE_USER_PASSWORD_FAILURE:\n            return { ...state, changePasswordProcessing: false };\n\n        case types.UPDATE_USER_DATA:\n            return { ...state, processing: true };\n        case types.UPDATE_USER_DATA_SUCCESS:\n            previousData = state.data ? { ...state.data } : {};\n            fullName = getUserIdentification(action.data);\n            return {\n                ...state,\n                processing: false,\n                data: { ...previousData, ...action.data, fullName: fullName }\n            };\n        case types.UPDATE_USER_DATA_FAILURE:\n            return { ...state, processing: false };\n        default:\n            return state\n    }\n};\n\nexport default User","import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as types from \"../actions/actionTypes\";\nimport { UserAction } from \"../actions\";\nimport * as userApi from \"../api/user\";\nimport { toastr } from \"react-redux-toastr\";\nimport { SetMessage } from \"../utilities/specifics/errorMessages\";\nimport logout from \"../utilities/logout\";\nimport Router from \"next/router\";\nimport {LOGIN} from \"../constants/urls\";\n\nexport function* watcherUser() {\n  yield takeLatest(types.GET_USER_DATA, workerGetInfo);\n  yield takeLatest(types.UPDATE_USER_DATA, workerUpdateInfo);\n  yield takeLatest(types.CHANGE_USER_PASSWORD, workerChangePassword);\n}\n\nfunction getInfo() {\n  return userApi.getInfo();\n}\nfunction* workerGetInfo() {\n  try {\n    const response = yield call(getInfo);\n    yield put(UserAction.getInfoSuccess(response.data.data));\n  } catch (error) {\n    const message = SetMessage(error);\n    yield put(UserAction.getInfoFailure(message));\n  }\n}\n\nfunction updateInfo(data) {\n  return userApi.updateInfo(data);\n}\nfunction* workerUpdateInfo(action) {\n  try {\n    const response = yield call(updateInfo, action.data);\n    yield put(UserAction.updateInfoSuccess(response.data.data));\n    // yield put(InitAction.getSuccess({ userData: response.data.data }));\n    response.data.message.forEach(message => {\n      toastr.success(\" \", message.toString());\n    });\n  } catch (error) {\n    console.log(error);\n    SetMessage(error, true);\n    yield put(UserAction.updateInfoFailure());\n  }\n}\n\nfunction fetchChangePassword(data) {\n  return userApi.changePassword(data);\n}\nfunction* workerChangePassword(action) {\n  try {\n    const response = yield call(fetchChangePassword, action.data);\n    yield put(UserAction.changePasswordSuccess());\n    response.data.message.forEach(message => {\n      toastr.success(\" \", message.toString());\n    });\n    logout();\n    //TODO FIX\n    // yield call(Router.replace, LOGIN);\n  } catch (error) {\n    SetMessage(error, true);\n    yield put(UserAction.changePasswordFailure());\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAHA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAHA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AArCA;AAuCA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;;;AASA;;;AAaA;;;AAkBA;AACA;AAnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AALA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AACA;AAJA;AAIA;AACA;AACA;AACA;AAPA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AACA;AAVA;AAWA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AACA;AAJA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAVA;AAAA;AACA;AADA;AAAA;AAAA;AAWA;AAXA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}