{"version":3,"file":"static/webpack/static/development/pages/_app.js.d2a38734fb7cc432f82f.hot-update.js","sources":["webpack:///./sagas/question.js"],"sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as types from \"../actions/actionTypes\";\nimport { QuestionAction } from \"../actions\";\nimport * as questionApi from \"../api/question\";\nimport { toastr } from \"react-redux-toastr\";\nimport { SetMessage } from \"../utilities/specifics/errorMessages\";\n\nexport function* watcherQuestion() {\n  yield takeLatest(types.QUESTION_LIST_REQUEST, list);\n  yield takeLatest(types.QUESTION_STORE_REQUEST, store);\n  yield takeLatest(types.QUESTION_UPDATE_REQUEST, update);\n}\n\nfunction getList(productId) {\n  return questionApi.getList(productId);\n}\n\nfunction* list(action) {\n  try {\n    const response = yield call(getList, action.productId);\n    yield put(QuestionAction.getListSuccess(response.data.data));\n  } catch (error) {\n    const message = SetMessage(error);\n    yield put(QuestionAction.getListFailure(message));\n  }\n}\n\nfunction storeReq(productId, data) {\n  return questionApi.store(productId, data);\n}\n\nfunction* store(action) {\n  try {\n    const response = yield call(storeReq, action.productId, action.data);\n    const data = response.data;\n    data.message.forEach(message => {\n      toastr.success(\" \", message.toString());\n    });\n    const listResponse = yield call(getList, action.productId);\n    yield put(QuestionAction.storeSuccess());\n    yield put(QuestionAction.getListSuccess(listResponse.data.data));\n  } catch (error) {\n    SetMessage(error, true);\n    yield put(QuestionAction.storeFailure());\n  }\n}\n\nfunction updateReq(productId, id, data) {\n  return questionApi.update(productId, id, data);\n}\n\nfunction* update(action) {\n  try {\n    const response = yield call(updateReq, action.productId, action.id, action.data);\n    const data = response.data;\n    data.message.forEach(message => {\n      toastr.success(\" \", message.toString());\n    });\n    const listResponse = yield call(getList);\n    yield put(QuestionAction.updateSuccess());\n    yield put(QuestionAction.getListSuccess(listResponse.data.data));\n  } catch (error) {\n    SetMessage(error, true);\n    yield put(QuestionAction.updateFailure());\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;AAUA;;;AAcA;;;AAoBA;AACA;AApDA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AALA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AACA;AACA;AACA;AACA;AANA;AAOA;AACA;AARA;AAOA;AAPA;AAQA;AACA;AATA;AAAA;AASA;AACA;AAVA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAWA;AAXA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AACA;AACA;AACA;AACA;AANA;AAOA;AACA;AARA;AAOA;AAPA;AAQA;AACA;AATA;AAAA;AASA;AACA;AAVA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAWA;AAXA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}