{"version":3,"file":"static/webpack/static/development/pages/product.js.b02a525106dd1279ca9c.hot-update.js","sources":["webpack:///./containers/productData.js"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Box } from \"../styled_components/product/dataBox\";\nimport { getComments } from \"../actions/comment\";\nimport Tabs from \"../components/product/productData/tabs\";\nimport Comments from \"../components/product/productData/comments\";\nimport Question from \"../components/product/productData/question\";\nimport Review from \"../components/product/productData/review\";\nimport Features from \"../components/product/productData/features\";\nimport {QuestionAction} from \"../actions\";\nclass ProductData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: \"features\",\n      comments: null,\n      comment_sort: \"buyers\",\n      questions: null,\n      question_sort: \"newest\"\n    };\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let result = {};\n    if (nextProps.comments !== prevState.comments) {\n      result.comments = nextProps.comments;\n    }\n    if (nextProps.questions !== prevState.questions) {\n      result.questions = nextProps.questions;\n    }\n\n    return result;\n  }\n\n  changeSort(value, type) {\n    if (type === \"comment\") {\n      this.setState(\n        {\n          comment_sort: value\n        },\n        () => {\n          this.props.getComments(this.props.id, {\n            sort: value\n          });\n        }\n      );\n    } else if (type === \"question\") {\n      this.setState(\n        {\n          question_sort: value\n        },\n        () => {\n          this.props.getQuestion(this.props.id, {\n            sort: value\n          });\n        }\n      );\n    }\n  }\n  listView() {\n    console.log(this.state.questions, \"ddww\");\n    switch (this.state.status) {\n      // case \"features\":\n      //   return (\n      //     <Features\n      //       enName={this.props.enName}\n      //       productData={this.props.productData}\n      //     />\n      //   );\n      case \"comments\":\n        return (\n          <Comments\n            name={this.props.name}\n            comments={this.state.comments}\n            sort={this.state.comment_sort}\n            changeSort={value => {\n              this.changeSort(value, \"comment\");\n            }}\n          />\n        );\n      case \"question\":\n        return (\n          <Question\n            questions={this.state.questions}\n            sort={this.state.question_sort}\n            changeSort={value => {\n              this.changeSort(value, \"question\");\n            }}\n          />\n        );\n      case \"review\":\n        return (\n          <Review\n            name={this.props.name}\n            advantages={this.props.advantages}\n            disadvantages={this.props.disadvantages}\n            rating={this.props.rating}\n            desc={this.props.desc}\n            meta_description={this.props.meta_description}\n          />\n        );\n      default:\n        return null;\n    }\n  }\n  changeStatus(value) {\n    if (this.state.status !== value) {\n      this.setState(\n        {\n          status: value\n        },\n        () => {\n          if (value === \"question\") {\n            if (!this.state.questions.isFetched) {\n              this.props.getQuestion(this.props.id, {\n                sort: this.state.question_sort\n              });\n            }\n          }\n          if (value === \"comments\") {\n            if (!this.state.comments.cache) {\n              this.props.getComments(this.props.id, {\n                sort: this.state.comment_sort\n              });\n            }\n          }\n        }\n      );\n    }\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <Box>\n          <div className=\"data\">\n            <div className=\"sep\" />\n            <div className=\"tabs\">\n              <Tabs\n                onChange={this.changeStatus.bind(this)}\n                status={this.state.status}\n              />\n            </div>\n            {this.listView()}\n          </div>\n        </Box>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = store => {\n  return {\n    comments: store.Comment,\n    questions: store.Question\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    getComments: (id, sort) => {\n      dispatch(getComments(id, sort));\n    },\n    getQuestion: (id, sort) => {\n      // dispatch(getQuestion(id, sort));\n      dispatch(QuestionAction.getListRequest(id, sort));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProductData);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;;;AAYA;AAAA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AADA;AAIA;AACA;AADA;AAGA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAzCA;AA2CA;;;AACA;AAAA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;;;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAUA;;;AA7HA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AArBA;AACA;AAyIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;;;;A","sourceRoot":""}